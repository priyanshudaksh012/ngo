"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractPlainRtpParametersByKind = extractPlainRtpParametersByKind;
exports.fillRtpParametersForKind = fillRtpParametersForKind;

/**
 * Extract plain RTP parameters from a SDP.
 *
 * @param {Object} sdpObj - SDP Object generated by sdp-transform.
 * @param {String} kind - media type.
 * @return {PlainRtpParameters}
 */
function extractPlainRtpParametersByKind(sdpObj, kind) {
  var mSection = (sdpObj.media || []).find(function (m) {
    return m.type === kind;
  });
  if (!mSection) throw new Error("m=".concat(kind, " section not found"));
  var plainRtpParameters = {
    ip: sdpObj.connection.ip,
    port: mSection.port
  };
  return plainRtpParameters;
}
/**
 * Fill the given RTP parameters for the given media type.
 *
 * @param {RTCRtpParameters} rtpParameters -  RTP parameters to be filled.
 * @param {Object} sdpObj - Local SDP Object generated by sdp-transform.
 * @param {String} kind - media type.
 */


function fillRtpParametersForKind(rtpParameters, sdpObj, kind) {
  var rtcp = {
    cname: null,
    reducedSize: true,
    mux: true
  };
  var mSection = (sdpObj.media || []).find(function (m) {
    return m.type === kind;
  });
  if (!mSection) throw new Error("m=".concat(kind, " section not found")); // Get the SSRC and CNAME.

  var ssrcCnameLine = (mSection.ssrcs || []).find(function (line) {
    return line.attribute === 'cname';
  });
  var ssrc;

  if (ssrcCnameLine) {
    ssrc = ssrcCnameLine.id;
    rtcp.cname = ssrcCnameLine.value;
  } // Fill RTP parameters.


  rtpParameters.rtcp = rtcp;
  rtpParameters.encodings = [];
  var encoding = {
    ssrc: ssrc
  };
  rtpParameters.encodings.push(encoding);
}